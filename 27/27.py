"""
   Euler discovered the remarkable quadratic formula:

                                  n² + n + 41

   It turns out that the formula will produce 40 primes for the consecutive
   values n = 0 to 39. However, when n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41
   is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly
   divisible by 41.

   The incredible formula  n² − 79n + 1601 was discovered, which produces 80
   primes for the consecutive values n = 0 to 79. The product of the
   coefficients, −79 and 1601, is −126479.

   Considering quadratics of the form:

     n² + an + b, where |a| < 1000 and |b| < 1000

     where |n| is the modulus/absolute value of n
     e.g. |11| = 11 and |−4| = 4

   Find the product of the coefficients, a and b, for the quadratic
   expression that produces the maximum number of primes for consecutive
   values of n, starting with n = 0.
"""

from math import sqrt
from itertools import product

def is_prime(n):
    """Returns true if n is a prime number"""
    if n == 2 :
        return True
    if not n % 2 or n < 2:
        return False
    return all(n % x for x in range(3, int(sqrt(n)) + 1, 2))

def get_primes(n):
    """Generate prime numbers in range 0..n-1"""
    yield 2
    p = 3
    while p < n:
        if is_prime(p):
            yield p
        p += 2

def primes_only_len(a, b):
    """Return the number of primes generated by n^2 + an + b 
    for consecutive values of n, starting with n = 0"""
    n = 0
    while is_prime(n ** 2 + a * n + b):
        n += 1
    return n

if __name__ == '__main__':
    upper = 1000

    max_a, max_b, max_len = 0, 0, 0
    for a in range(-upper + 1, upper):
        for prime, sign in product(get_primes(upper), (-1, 1)):
            b = prime * sign
            if primes_only_len(a, b) > max_len:
                max_a, max_b, max_len = a, b, primes_only_len(a, b)
    cofficient = max_a * max_b

    print(cofficient)
    
"""
NOTE:
For the result of n ** 2 + a * n + b to be a prime for 0 <= n < k,
b must be a prime number itself (to be true for n = 0)
"""
