"""
   Triangle, pentagonal, and hexagonal numbers are generated by the following
   formulae:

   Triangle     T[n]=n(n+1)/2    1, 3, 6, 10, 15, ...
   Pentagonal   P[n]=n(3n−1)/2   1, 5, 12, 22, 35, ...
   Hexagonal    H[n]=n(2n−1)     1, 6, 15, 28, 45, ...

   It can be verified that T[285] = P[165] = H[143] = 40755.

   Find the next triangle number that is also pentagonal and hexagonal.
"""

def triangular(n):
    """Return the nth triangular number"""
    return n * (n + 1) // 2
    
def pentagonal(n):
    """Return the nth pentagonal number"""
    return n * (3 * n - 1) // 2
    
def hexagonal(n):
    """Return the nth hexagonal number"""
    return n * (2 * n - 1)
    
if __name__ == '__main__':

    P, H = set(), set()
    n = 143
    while True:
        n += 1
        T_n = triangular(n)
        P.add(pentagonal(n))
        H.add(hexagonal(n))
        if T_n in P and T_n in H:
            break

    print(T_n)

"""
NOTE:
We do not have to start from n = 1 because the result occurs after 
    T[285] = P[165] = H[143] = 40755
Any triangular number after T[285] could possibly only be a pentagonal
number over P[165] and/or a hexagonal number after H[143]. 
"""
